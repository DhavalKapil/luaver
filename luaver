#!/bin/sh
# Lua Version Manager
# Managing and switching between different versions of Lua, LuaJIT and Luarocks made easy
#
# Developed by Dhaval Kapil <me@dhavalkapil.com>
#
# MIT license http://www.opensource.org/licenses/mit-license.php

__luaver_VERSION="1.0.0"

# Directories and files to be used

__luaver_LUAVER_DIR="${HOME}/.luaver"                                      # The luaver directory
__luaver_SRC_DIR="${__luaver_LUAVER_DIR}/src"                              # Source code is downloaded
__luaver_LUA_DIR="${__luaver_LUAVER_DIR}/lua"                              # Lua source is built
__luaver_LUA_DEFAULT_FILE="${__luaver_LUAVER_DIR}/DEFAULT_LUA"             # Lua default version
__luaver_LUAJIT_DIR="${__luaver_LUAVER_DIR}/luajit"                        # Luajit source is built
__luaver_LUAJIT_DEFAULT_FILE="${__luaver_LUAVER_DIR}/DEFAULT_LUAJIT"       # Luajit default version
__luaver_LUAROCKS_DIR="${__luaver_LUAVER_DIR}/luarocks"                    # Luarocks source is built
__luaver_LUAROCKS_DEFAULT_FILE="${__luaver_LUAVER_DIR}/DEFAULT_LUAROCKS"   # Luarocks default version

# Verbose level
__luaver_verbose=0

###############################################################################
# Helper functions

# Error handling function
__luaver_error()
{
    printf "%s\n" "${1}" 1>&2
}

# Printing bold text - TODO
__luaver_print()
{
    if [ ! $__luaver_verbose = 0 ]
    then
        tput bold
        printf "==>  %s\n" "${1}"
        tput sgr0
    fi
}

# Printing formatted text
__luaver_print_formatted()
{
    printf "%s\n" "${1}"
}

# A wrapper function to execute commands on the terminal and exit on error
# Called whenever the execution should stop after any error occurs
__luaver_exec_command()
{
    if ! "${@}"
    then
        __luaver_error "Unable to execute the following command:\n${1}\nExiting"
    fi
}

# Perform some initialization
__luaver_init()
{
    if [ ! -e "${__luaver_LUAVER_DIR}" ]
    then
        'mkdir' "${__luaver_LUAVER_DIR}"
    fi

    if [ ! -e "${__luaver_SRC_DIR}" ]
    then
        'mkdir' "${__luaver_SRC_DIR}"
    fi

    if [ ! -e "${__luaver_LUA_DIR}" ]
    then
        'mkdir' "${__luaver_LUA_DIR}"
    fi

    if [ ! -e "${__luaver_LUAJIT_DIR}" ]
    then
        'mkdir' "${__luaver_LUAJIT_DIR}"
    fi

    if [ ! -e "${__luaver_LUAROCKS_DIR}" ]
    then
        'mkdir' "${__luaver_LUAROCKS_DIR}"
    fi

    if [ -f "${__luaver_LUA_DEFAULT_FILE}" ]
    then
        local lua_version
        lua_version=$(cat "${__luaver_LUA_DEFAULT_FILE}")
        __luaver_use_lua "${lua_version}"
    fi

    if [ -f "${__luaver_LUAJIT_DEFAULT_FILE}" ]
    then
        local luajit_version
        luajit_version=$(cat "${__luaver_LUAJIT_DEFAULT_FILE}")
        __luaver_use_luajit "${luajit_version}"
    fi

    if [ -f "${__luaver_LUAROCKS_DEFAULT_FILE}" ]
    then
        local luarocks_version
        luarocks_version=$(cat "${__luaver_LUAROCKS_DEFAULT_FILE}")
        __luaver_use_luarocks "${luarocks_version}"
    fi

    __luaver_verbose=1
}

# Downloads file from a url
# Synopsis:
#     __luaver_download url [archive_path]
# Exit status:
#     0   if already exists or successfully downloaded
#     1   if any error is occurred
__luaver_download()
{
    local url="${1:?}"
    local archive_path="${2-${url##*/}}"

    [ -e "${archive_path}" ] && return 0

    __luaver_print "Downloading from ${url}"
    if {
        if 'curl' -V >/dev/null 2>&1
        then
            'curl' -fsSL "${url}" # cURL
        else
            'wget' -qO- "${url}" # GNU wget or busybox
        fi
    } >"${archive_path}"
    then
        __luaver_print "Download successful"
        return 0
    else
        rm -f "${archive_path}"
        __luaver_error "'wget' or 'curl' must be installed"
        return 1
    fi
}

# Unpacks an archive
# Synopsis:
#     __luaver_unpack url unpack_dir_name [basedir]
# Exit status:
#     0   if already exists or successfully unpacked
#     1   if any error is occurred
__luaver_unpack()
{
    local url="${1:?}"
    local unpack_dir_name="${2:?}"
    local basedir="${3-.}"

    [ -e "${basedir}/${unpack_dir_name}" ] && return 0

    __luaver_print "Unpacking ${url}"
    if 'tar' -xzf "${url}" -C "${basedir}" # GNU tar, BSD tar or busybox
    then
        __luaver_print "Unpack successful"
        return 0
    else
        rm -rf "${basedir:?}/${unpack_dir_name}"
        __luaver_error "'tar' must be installed"
        return 1
    fi
}

# Removes existing strings starting with a prefix in PATH
__luaver_remove_previous_paths()
{
    local prefix=$1

    local new_path
    new_path=$(echo "${PATH}" | sed \
        -e "s#${prefix}/[^/]*/bin[^:]*:##g" \
        -e "s#:${prefix}/[^/]*/bin[^:]*##g" \
        -e "s#${prefix}/[^/]*/bin[^:]*##g")

    export PATH=$new_path
}

# Append to PATH
__luaver_append_path()
{
    export PATH="${1}:${PATH}"
}

# Uninstalls lua/luarocks
# Synopsis:
#     __luaver_uninstall package_name package_path package_dir
# Exit status:
#     0   if successfully uninstalled
#     1   if any error is occurred
__luaver_uninstall()
{
    local package_name="${1:?}"
    local package_path="${2:?}"
    local package_dir="${3:?}"

    __luaver_print "Uninstalling ${package_name}"

    if [ ! -e "${package_path}/${package_dir}" ]
    then
        __luaver_error "${package_name} is not installed"
        return 1
    fi

    'rm' -r "${package_path:?}/${package_dir}" && __luaver_print "Successfully uninstalled ${package_name}"
}

# Returns the platform# Returns the platform
# Synopsis:
#     __luaver_get_platform
# Exit status:
#     0   if platform was successfully determined
#     1   if platform could not be determined
__luaver_get_platform()
{
    case $(uname -s 2>/dev/null) in
        Linux )                    echo "linux" ;;
        FreeBSD )                  echo "freebsd" ;;
        *BSD* )                    echo "bsd" ;;
        Darwin )                   echo "macosx" ;;
        CYGWIN* | MINGW* | MSYS* ) echo "mingw" ;;
        AIX )                      echo "aix" ;;
        SunOS )                    echo "solaris" ;;
        * )                        return 1
    esac
}

# Returns the current lua version
# Synopsis:
#     __luaver_get_current_lua_version
# Exit status:
#     0   if lua was found
#     1   if lua was not found
__luaver_get_current_lua_version()
{
    case "$(command -v lua)" in
        "${__luaver_LUA_DIR}"/*/bin/lua ) command -v lua | 'awk' -F/ '{ print $(NF-2) }' ;;
        * ) return 1
    esac
}

# Returns the current lua version (only the first two numbers)
# Synopsis:
#     __luaver_get_current_lua_version_short
# Exit status:
#     0   if lua was found
#     1   if lua was not found
__luaver_get_current_lua_version_short()
{
    __luaver_get_current_lua_version | 'awk' -F. -vOFS=. '{ print $1, $2 }'
}

# Returns the current luajit version
# Synopsis:
#     __luaver_get_current_luajit_version
# Exit status:
#     0   if luajit was found
#     1   if luajit was not found
__luaver_get_current_luajit_version()
{
    case "$(command -v luajit)" in
        "${__luaver_LUAJIT_DIR}"/*/bin/luajit ) command -v luajit | 'awk' -F/ '{ print $(NF-2) }' ;;
        * ) return 1
    esac
}

# Returns the current luarocks version
# Synopsis:
#     __luaver_get_current_luarocks_version
# Exit status:
#     0   if luarocks was found
#     1   if luarocks was not found
__luaver_get_current_luarocks_version()
{
    case "$(command -v luarocks)" in
        "${__luaver_LUAROCKS_DIR}"/*/bin/luarocks ) command -v luarocks | 'awk' -F/ '{ print $(NF-2) }' | 'awk' -F_ '{ print $1 }';;
        * ) return 1
    esac
}

# Returns the short lua version being supported by present luarocks
# Synopsis:
#     __luaver_get_lua_version_by_current_luarocks
# Exit status:
#     0   if luarocks was found
#     1   if luarocks was not found
__luaver_get_lua_version_by_current_luarocks()
{
    case "$(command -v luarocks)" in
        "${__luaver_LUAROCKS_DIR}"/*/bin/luarocks ) command -v luarocks | 'awk' -F/ '{ print $(NF-2) }' | 'awk' -F_ '{ print $2 }';;
        * ) return 1
    esac
}

# End of Helper functions
###############################################################################

__luaver_usage()
{
    __luaver_print_formatted ""
    __luaver_version
    __luaver_print_formatted "Usage:\n"
    __luaver_print_formatted "   luaver help                              Displays this message"
    __luaver_print_formatted "   luaver install <version>                 Installs lua-<version>"
    __luaver_print_formatted "   luaver use <version>                     Switches to lua-<version>"
    __luaver_print_formatted "   luaver set-default <version>             Sets <version> as default for lua"
    __luaver_print_formatted "   luaver unset-default                     Unsets the default lua version"
    __luaver_print_formatted "   luaver uninstall <version>               Uninstalls lua-<version>"
    __luaver_print_formatted "   luaver list                              Lists installed lua versions"
    __luaver_print_formatted "   luaver install-luajit <version>          Installs luajit-<version>"
    __luaver_print_formatted "   luaver use-luajit <version>              Switches to luajit-<version>"
    __luaver_print_formatted "   luaver set-default-luajit <version>      Sets <version> as default for luajit"
    __luaver_print_formatted "   luaver unset-default-luajit              Unsets the default luajit version"
    __luaver_print_formatted "   luaver uninstall-luajit <version>        Uninstalls luajit-<version>"
    __luaver_print_formatted "   luaver list-luajit                       Lists installed luajit versions"
    __luaver_print_formatted "   luaver install-luarocks <version>        Installs luarocks<version>"
    __luaver_print_formatted "   luaver use-luarocks <version>            Switches to luarocks-<version>"
    __luaver_print_formatted "   luaver set-default-luarocks <version>    Sets <version> as default for luarocks"
    __luaver_print_formatted "   luaver unset-default-luarocks            Unsets the default luarocks version"
    __luaver_print_formatted "   luaver uninstall-luarocks <version>      Uninstalls luarocks-<version>"
    __luaver_print_formatted "   luaver list-luarocks                     Lists all installed luarocks versions"
    __luaver_print_formatted "   luaver current                           Lists present versions being used"
    __luaver_print_formatted "   luaver version                           Displays luaver version"
    __luaver_print_formatted "\nExamples:\n"
    __luaver_print_formatted "   luaver install 5.3.1                     # Installs lua version 5.3.1"
    __luaver_print_formatted "   luaver install 5.3.0                     # Installs lua version 5.3.0"
    __luaver_print_formatted "   luaver use 5.3.1                         # Switches to lua version 5.3.1"
    __luaver_print_formatted "   luaver install-luarocks 2.3.0            # Installs luarocks version 2.3.0"
    __luaver_print_formatted "   luaver uninstall 5.3.0                   # Uninstalls lua version 5.3.0"
}

# Synopsis:
#     __luaver_install_lua version [baseurl] [archive_path]
# Exit status:
#     0   if successfully installed
#     1   if any error is occurred
__luaver_install_lua()
{
    local version="${1:?}"
    local baseurl="${2-http://www.lua.org/ftp}"
    local lua_dir_name="lua-${version}"
    local archive_path="${3-${__luaver_SRC_DIR}/${lua_dir_name}.tar.gz}"

    __luaver_print "Installing ${lua_dir_name}"

    __luaver_print "Detecting platform"
    if __luaver_get_platform >/dev/null 2>&1
    then
        __luaver_print "Platform detected: $(__luaver_get_platform)"
    else
        __luaver_print "Unable to detect platform. Using default 'posix'"
    fi

    __luaver_download "${baseurl}/${lua_dir_name}.tar.gz" "${archive_path}" &&
    __luaver_unpack "${archive_path}" "${lua_dir_name}" "${__luaver_SRC_DIR}" &&
    if (
        __luaver_print "Compiling ${lua_dir_name}"
        'cd' "${__luaver_SRC_DIR}/${lua_dir_name}" &&
        'make' "$(__luaver_get_platform || echo "posix")" install INSTALL_TOP="${__luaver_LUA_DIR}/${version}"
    )
    then
        __luaver_print "${lua_dir_name} successfully installed. Do you want to switch to this version? [Y/n]: "
        read -r choice
        case $choice in
            [yY][eE][sS] | [yY] )
                __luaver_use_lua "${version}"
                ;;
        esac

        return 0
    else
        return 1
    fi
}

# Synopsis:
#     __luaver_use_lua version [luarocks_version]
# Exit status:
#     0   if successfully switched
#     1   if any error is occurred
__luaver_use_lua()
{
    local version="${1:?}"
    local luarocks_version="${2-$(__luaver_get_current_luarocks_version)}"
    local lua_name="lua-${version}"

    __luaver_print "Switching to ${lua_name}"

    # Checking if this version exists
    if [ ! -e "${__luaver_LUA_DIR}/${version}" ]
    then
        __luaver_print "${lua_name} is not installed. Want to install it? [Y/n]: "
        read -r choice
        case $choice in
            [yY][eE][sS] | [yY] )
                __luaver_install_lua "${version}"
                ;;
            * )
                __luaver_error "Unable to use ${lua_name}"
        esac
        return
    fi

    __luaver_remove_previous_paths "${__luaver_LUA_DIR}"
    __luaver_append_path "${__luaver_LUA_DIR}/${version}/bin"

    __luaver_print "Successfully switched to ${lua_name}"

    # Checking whether luarocks is in use
    if __luaver_get_current_luarocks_version >/dev/null 2>/dev/null
    then
        # Checking if lua version of luarocks is consistent
        if [ "x$(__luaver_get_current_lua_version_short)" != "x$(__luaver_get_lua_version_by_current_luarocks)" ]
        then
            # Removing earlier version
            __luaver_remove_previous_paths "${__luaver_LUAROCKS_DIR}"

            __luaver_print "Luarocks in use is inconsistent with this lua version"
            __luaver_use_luarocks "${luarocks_version}"
        fi
    fi
}

# __luaver_set_default_lua version
__luaver_set_default_lua()
{
    'echo' "${1:?}" > "${__luaver_LUA_DEFAULT_FILE}" &&
    __luaver_print "Default version set for lua: ${1}"
}

__luaver_unset_default_lua()
{
    'rm' "${__luaver_LUA_DEFAULT_FILE}" &&
    __luaver_print "Removed default version for lua"
}

# Synopsis:
#     __luaver_uninstall_lua version
# Exit status:
#     0   if successfully uninstalled
#     1   if any error is occurred
__luaver_uninstall_lua()
{
    local version="${1:?}"
    local lua_name="lua-${version}"

    if __luaver_uninstall "${lua_name}" "${__luaver_LUA_DIR}" "${version}"
    then
        if [ "x${version}" = "x$(__luaver_get_current_lua_version)" ]
        then
            __luaver_remove_previous_paths "${__luaver_LUA_DIR}"
        fi
    else
        return 1
    fi
}

__luaver_list_lua()
{
    __luaver_print "Installed versions: (currently $(__luaver_get_current_lua_version || echo none))"
    'find' "${__luaver_LUA_DIR}" -name '*.*' -prune | 'awk' -F/ '{ print $NF }'
}

# Synopsis:
#     __luaver_install_luajit version [baseurl] [archive_path]
# Exit status:
#     0   if successfully installed
#     1   if any error is occurred
__luaver_install_luajit()
{
    local version="${1:?}"
    local baseurl="${2-http://luajit.org/download}"
    local lua_dir_name="LuaJIT-${version}"
    local archive_path="${3-${__luaver_LUAJIT_DIR}/${lua_dir_name}.tar.gz}"

    __luaver_print "Installing ${lua_dir_name}"

    __luaver_download "${baseurl}/${lua_dir_name}.tar.gz" "${archive_path}" &&
    __luaver_unpack "${archive_path}" "${lua_dir_name}" "${__luaver_LUAJIT_DIR}" &&
    if (
        __luaver_print "Compiling ${lua_dir_name}"
        'cd' "${__luaver_LUAJIT_DIR}/${lua_dir_name}" &&
        'make' PREFIX="${__luaver_LUAJIT_DIR}/${version}" &&
        'make' install PREFIX="${__luaver_LUAJIT_DIR}/${version}"
    )
    then
        __luaver_print "${lua_dir_name} successfully installed. Do you want to switch to this version? [Y/n]: "
        read -r choice
        case $choice in
            [yY][eE][sS] | [yY] )
                __luaver_use_luajit "${version}"
                ;;
        esac

        return 0
    else
        return 1
    fi
}

# Synopsis:
#     __luaver_use_luajit version
# Exit status:
#     0   if successfully switched
#     1   if any error is occurred
__luaver_use_luajit()
{
    local version="${1:?}"
    local luajit_name="LuaJIT-${version}"

    __luaver_print "Switching to ${luajit_name}"

    # Checking if this version exists
    if [ ! -e "${__luaver_LUAJIT_DIR}/${version}" ]
    then
        __luaver_print "${luajit_name} is not installed. Want to install it? [Y/n]: "
        read -r choice
        case $choice in
            [yY][eE][sS] | [yY] )
                __luaver_install_lua "${version}"
                ;;
            * )
                __luaver_error "Unable to use ${luajit_name}"
        esac
        return
    fi

    __luaver_remove_previous_paths "${__luaver_LUAJIT_DIR}"
    __luaver_append_path "${__luaver_LUAJIT_DIR}/${version}/bin"

    __luaver_print "Successfully switched to ${luajit_name}"
}

# __luaver_set_default_luajit version
__luaver_set_default_luajit()
{
    'echo' "${1:?}" > "${__luaver_LUAJIT_DEFAULT_FILE}" &&
    __luaver_print "Default version set for luajit: ${1}"
}

__luaver_unset_default_luajit()
{
    'rm' "${__luaver_LUAJIT_DEFAULT_FILE}" &&
    __luaver_print "Removed default version for LuaJIT"
}

# Synopsis:
#     __luaver_uninstall_luajit version
# Exit status:
#     0   if successfully uninstalled
#     1   if any error is occurred
__luaver_uninstall_luajit()
{
    local version=${1:?}
    local luajit_name="LuaJIT-${version}"

    if __luaver_uninstall "${luajit_name}" "${__luaver_LUAJIT_DIR}" "${version}"
    then
        if [ "x${version}" = "x$(__luaver_get_current_luajit_version)" ]
        then
            __luaver_remove_previous_paths "${__luaver_LUAJIT_DIR}"
        fi
    else
        return 1
    fi
}

__luaver_list_luajit()
{
    __luaver_print "Installed versions: (currently $(__luaver_get_current_luajit_version || echo none))"
    'find' "${__luaver_LUAJIT_DIR}" -name '*.*' -prune | 'awk' -F/ '{ print $NF }'
}

# Synopsis:
#     __luaver_install_luarocks version [baseurl] [archive_path]
# Exit status:
#     0   if successfully installed
#     1   if any error is occurred
__luaver_install_luarocks()
{
    local version="${1:?}"
    local baseurl="${2-http://luarocks.org/releases}"
    local luarocks_dir_name="luarocks-${version}"
    local archive_path="${3-${__luaver_SRC_DIR}/${luarocks_dir_name}.tar.gz}"

    # Checking whether any version of lua is installed or not
    if [ "x$(__luaver_get_current_lua_version)" = "x" ]
    then
        __luaver_error "No lua version set"
        return 1
    fi

    __luaver_print "Installing ${luarocks_dir_name}"

    __luaver_download "${baseurl}/${luarocks_dir_name}.tar.gz" "${archive_path}" &&
    __luaver_unpack "${archive_path}" "${luarocks_dir_name}" "${__luaver_SRC_DIR}" &&
    if (
        __luaver_print "Compiling ${luarocks_dir_name}"
        'cd' "${__luaver_SRC_DIR}/${luarocks_dir_name}" &&
        './configure' \
            --prefix="${__luaver_LUAROCKS_DIR}/${version}_$(__luaver_get_current_lua_version_short)" \
            --with-lua="${__luaver_LUA_DIR}/$(__luaver_get_current_lua_version)" \
            --with-lua-bin="${__luaver_LUA_DIR}/$(__luaver_get_current_lua_version)/bin" \
            --with-lua-include="${__luaver_LUA_DIR}/$(__luaver_get_current_lua_version)/include" \
            --with-lua-lib="${__luaver_LUA_DIR}/$(__luaver_get_current_lua_version)/lib" \
            --versioned-rocks-dir &&
        'make' build &&
        'make' install
    )
    then
        __luaver_print "${luarocks_dir_name} successfully installed. Do you want to switch to this version? [Y/n]: "
        read -r choice
        case $choice in
            [yY][eE][sS] | [yY] )
                __luaver_use_luarocks "${version}"
                ;;
        esac

        return 0
    else
        return 1
    fi
}

# Synopsis:
#     __luaver_use_luarocks version
# Exit status:
#     0   if successfully switched
#     1   if any error is occurred
__luaver_use_luarocks()
{
    local version="${1:?}"
    local luarocks_name="luarocks-${version}"

    if [ "x$(__luaver_get_current_lua_version_short)" = "x" ]
    then
        __luaver_error "You need to first switch to a lua installation"
        return 1
    fi

    __luaver_print "Switching to ${luarocks_name} with lua version: $(__luaver_get_current_lua_version_short)"

    # Checking if this version exists
    if [ ! -e "${__luaver_LUAROCKS_DIR}/${version}_$(__luaver_get_current_lua_version_short)" ]
    then
        __luaver_print "${luarocks_name} is not installed with lua version $(__luaver_get_current_lua_version_short). Want to install it? [Y/n]: "
        read -r choice
        case $choice in
            [yY][eE][sS] | [yY] )
                __luaver_install_luarocks "${version}"
                ;;
            * )
                __luaver_error "Unable to use ${luarocks_name}"
        esac
        return
    fi

    __luaver_remove_previous_paths "${__luaver_LUAROCKS_DIR}"
    __luaver_append_path "${__luaver_LUAROCKS_DIR}/${version}_$(__luaver_get_current_lua_version_short)/bin"

    # Setting up LUA_PATH and LUA_CPATH
    eval "$('luarocks' path)"

    __luaver_print "Successfully switched to ${luarocks_name}"
}

# __luaver_set_default_luarocks version
__luaver_set_default_luarocks()
{
    'echo' "${1:?}" > "${__luaver_LUAROCKS_DEFAULT_FILE}" &&
    __luaver_print "Default version set for luarocks: ${1}"
}

__luaver_unset_default_luarocks()
{
    'rm' "${__luaver_LUAROCKS_DEFAULT_FILE}" &&
    __luaver_print "Removed default version for luarocks"
}

# Synopsis:
#     __luaver_uninstall_luarocks version [lua_version]
# Exit status:
#     0   if successfully uninstalled
#     1   if any error is occurred
__luaver_uninstall_luarocks()
{
    local version=$1
    local lua_version="${2-$(__luaver_get_current_lua_version_short)}"
    local luarocks_name="luarocks-${version}"

    __luaver_print "${luarocks_name} will be uninstalled for lua version ${lua_version}"
    if __luaver_uninstall "${luarocks_name}" "${__luaver_LUAROCKS_DIR}" "${version}_${lua_version}"
    then
        if [ "x${version}" = "x$(__luaver_get_current_luarocks_version)" ]
        then
            __luaver_remove_previous_paths "${__luaver_LUAROCKS_DIR}"
        fi
    fi
}

__luaver_list_luarocks()
{
    __luaver_print "Installed versions: (currently $(__luaver_get_current_luarocks_version || echo none) in lua $(__luaver_get_lua_version_by_current_luarocks || echo none))"
    'find' "${__luaver_LUAROCKS_DIR}" -name '*.*' -prune | 'awk' -F/ '{ print $NF }' | 'awk' -F_ '{ print $1 "\tlua:" $2}'
}

__luaver_current()
{
    lua_version=$(__luaver_get_current_lua_version)
    luajit_version=$(__luaver_get_current_luajit_version)
    luarocks_version=$(__luaver_get_current_luarocks_version)

    __luaver_print "Current versions:"

    if [ ! "${lua_version}" = "" ]
    then
        __luaver_print "lua-${lua_version}"
    fi
    if [ ! "${luajit_version}" = "" ]
    then
        __luaver_print "LuaJIT-${luajit_version}"
    fi
    if [ ! "${luarocks_version}" = "" ]
    then
        __luaver_print "luarocks-${luarocks_version}"
    fi
}

__luaver_version()
{
    __luaver_print_formatted "Lua Version Manager ${__luaver_VERSION}\n"
    __luaver_print_formatted "Developed by Dhaval Kapil <me@dhavalkapil.com>\n"
}

# Init environment
__luaver_init

luaver()
{
    local command="${1}"
    shift

    case $command in
        "help" )                    __luaver_usage;;

        "install" )                 __luaver_install_lua "${@}";;
        "use" )                     __luaver_use_lua "${@}";;
        "set-default" )             __luaver_set_default_lua "${@}";;
        "unset-default" )           __luaver_unset_default_lua "${@}";;
        "uninstall" )               __luaver_uninstall_lua "${@}";;
        "list" )                    __luaver_list_lua;;

        "install-luajit")           __luaver_install_luajit "${@}";;
        "use-luajit" )              __luaver_use_luajit "${@}";;
        "set-default-luajit" )      __luaver_set_default_luajit "${@}";;
        "unset-default-luajit" )    __luaver_unset_default_luajit "${@}";;
        "uninstall-luajit" )        __luaver_uninstall_luajit "${@}";;
        "list-luajit" )             __luaver_list_luajit;;

        "install-luarocks")         __luaver_install_luarocks "${@}";;
        "use-luarocks" )            __luaver_use_luarocks "${@}";;
        "set-default-luarocks" )    __luaver_set_default_luarocks "${@}";;
        "unset-default-luarocks" )  __luaver_unset_default_luarocks "${@}";;
        "uninstall-luarocks" )      __luaver_uninstall_luarocks "${@}";;
        "list-luarocks" )           __luaver_list_luarocks;;

        "current" )                 __luaver_current;;
        "version" )                 __luaver_version;;
        * )                         __luaver_usage;;
    esac
}

[ -n "$1" ] && luaver "$@"
